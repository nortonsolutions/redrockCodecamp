{
    "name": "DOM Events",
    "order": 2,
    "time": "5 hours",
    "helpRoom": "Help",
    "challenges": [
				{
					"id": "62c317507b7afb7148a05665",
					"title": "Introduction to the DOM Events Challenges",
					"description": [
							[
									"SOME VIDEOS FOR YOUR EDIFICATION",
									"",
									"We recommend you watch the following videos before proceeding with the DOM Events challenges: <br><br><a target='_blank' href='http://codebasecamp.org/educationMaterials/videos/phase-II/domEvents/'>Click here</a><br><br>You can also take a look in the Web Technology module of Rachel (JavaScript | JavaScript for DOM) for more tutorial videos.",
									"#"

							]
					],
					"releasedOn": "",
					"challengeSeed": [],
					"tests": [],
					"type": "Waypoint",
					"challengeType": 7,
					"isRequired": false,
					"translations": {}
			},
			{
				"id": "b6161230871a59173a0995bc",
				"title": "Additional reading about DOM events",
				"description": [
						[
								"SOME LECTURES AND EXAMPLES FOR YOUR EDIFICATION",
								"",
								"We recommend you refer to the following Stanford CS 193X lectures before proceeding with the DOM Events challenges: <br><br><a target='_blank' href='http://codebasecamp.org/educationMaterials/workbenchProjects/phase-ii/personality-quiz/lectures/'>Click here</a>",
								"#"

						]
				],
				"releasedOn": "",
				"challengeSeed": [],
				"tests": [],
				"type": "Waypoint",
				"challengeType": 7,
				"isRequired": false,
				"translations": {}
			},

			{
			"id": "587d7fad367417b2b2512be1",
			"title": "Handle Click Events with the onclick property",
			"description": [
			  "You want your code to execute only once your page has finished loading. For that purpose, you can attach a JavaScript event to the document called <code>DOMContentLoaded</code>. Here's the code that does this:",
			  "<blockquote>document.addEventListener('DOMContentLoaded',function() {<br><br>});</blockquote>",
			  "You can implement event handlers that go inside of the <code>DOMContentLoaded</code> function. You can implement an <code>onclick</code> event handler which triggers when the user clicks on the element with id <code>getMessage</code>, by adding the following code:",
			  "<blockquote>document.getElementById('getMessage').onclick=function(){};</blockquote>",
			  "<hr>",
			  "Add a click event handler inside of the <code>DOMContentLoaded</code> function for the element with id of <code>getMessage</code>."
			],
			"challengeSeed": [
			  "<script>",
			  "    // Add your code below this line",
			  "    ",
			  "    ",
			  "    // Add your code above this line",
			  "</script>",
			  "<style>",
			  "  body {",
			  "    text-align: center;",
			  "    font-family: \"Helvetica\", sans-serif;",
			  "  }",
			  "  h1 {",
			  "    font-size: 2em;",
			  "    font-weight: bold;",
			  "  }",
			  "  .box {",
			  "    border-radius: 5px;",
			  "    background-color: #eee;",
			  "    padding: 20px 5px;",
			  "  }",
			  "  button {",
			  "    color: white;",
			  "    background-color: #4791d0;",
			  "    border-radius: 5px;",
			  "    border: 1px solid #4791d0;",
			  "    padding: 5px 10px 8px 10px;",
			  "  }",
			  "  button:hover {",
			  "    background-color: #0F5897;",
			  "    border: 1px solid #0F5897;",
			  "  }",
			  "</style>",
			  "<h1>Cat Photo Finder</h1> ",
			  "<p class=\"message box\">",
			  "  The message will go here",
			  "</p>",
			  "<p>",
			  "  <button id=\"getMessage\">",
			  "    Get Message",
			  "  </button>",
			  "</p>"
			],
			"tests": [
			  "assert(code.match(/document\\.getElementById\\(\\s*?('|\")getMessage\\1\\s*?\\)/g), 'message: Your code should use the <code>document.getElementById</code> method to select the <code>getMessage</code> element.');",
			  "assert(typeof document.getElementById('getMessage').onclick === 'function', 'message: Your code should add an <code>onclick</code> event handler.');"
			],
			"solutions": [],
			"hints": [],
			"type": "waypoint",
			"releasedOn": "Feb 17, 2017",
			"challengeType": 0,
			"translations": {}
		  },
		  {
			"id": "587d7fad367417b2b2512be2",
			"title": "Change Text with click Events",
			"description": [
			  "When the click event happens, you can use JavaScript to update an HTML element.",
			  "For example, when a user clicks the \"Get Message\" button, it changes the text of the element with the class <code>message</code> to say \"Here is the message\".",
			  "This works by adding the following code within the click event:",
			  "<code>document.getElementsByClassName('message')[0].innerHTML=\"Here is the message\";</code>",
			  "<hr>",
			  "Add code inside the <code>onclick</code> event handler to change the text inside the <code>message</code> element to say \"Here is the message\"."
			],
			"challengeSeed": [
			  "<script>",
			  "  document.addEventListener('DOMContentLoaded',function(){",
			  "    document.getElementById('getMessage').onclick=function(){",
			  "      // Add your code below this line",
			  "      ",
			  "      ",
			  "      // Add your code above this line",
			  "    }",
			  "  });",
			  "</script>",
			  "<style>",
			  "  body {",
			  "    text-align: center;",
			  "    font-family: \"Helvetica\", sans-serif;",
			  "  }",
			  "  h1 {",
			  "    font-size: 2em;",
			  "    font-weight: bold;",
			  "  }",
			  "  .box {",
			  "    border-radius: 5px;",
			  "    background-color: #eee;",
			  "    padding: 20px 5px;",
			  "  }",
			  "  button {",
			  "    color: white;",
			  "    background-color: #4791d0;",
			  "    border-radius: 5px;",
			  "    border: 1px solid #4791d0;",
			  "    padding: 5px 10px 8px 10px;",
			  "  }",
			  "  button:hover {",
			  "    background-color: #0F5897;",
			  "    border: 1px solid #0F5897;",
			  "  }",
			  "</style>",
			  "<h1>Cat Photo Finder</h1> ",
			  "<p class=\"message box\">",
			  "  The message will go here",
			  "</p>",
			  "<p>",
			  "  <button id=\"getMessage\">",
			  "    Get Message",
			  "  </button>",
			  "</p>"
			],
			"tests": [
			  "assert(code.match(/document\\.getElementsByClassName\\(\\s*?('|\")message\\1\\s*?\\)\\[0\\]\\.innerHTML\\s*?=\\s*?('|\")Here is the message\\2/g), 'message: Your code should use the <code>document.getElementsByClassName</code> method to select the element with class <code>message</code> and set its <code>innerHTML</code> to the given string.');"
			],
			"solutions": [],
			"hints": [],
			"type": "waypoint",
			"releasedOn": "Feb 17, 2017",
			"challengeType": 0,
			"translations": {}
		  },
        {
            "id": "84ee88402700db21189de995",
            "title": "Attaching an event to an element",
            "description": [
							"The <a target='_blank' href='http://codebasecamp.org/docs/javascript/developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener.html'>addEventListener method</a> also allows a third argument, which is either an options object or a single boolean for <em>useCapture</em>.  If you set this to true, then the event will be captured by the outermost elements first, before propagating downward to inner elements.",
							"<hr>",	
							"In this case we want to set useCapture to false, because we want to use the default bubble-up handling of events.  (In modern browsers this is the default behavior, but it's good to know about this option.)  Use the addEventListener function to attach an event listener to the submit button that runs checkInput when submit is clicked, and specifically set useCapture to false."
            ],
            "challengeSeed": [
                "<html>",
                "<input type=\"text\" id=\"userNameInput\" placeholder=\"Username\">",
                "<input type=\"text\" id=\"passwordInput\" placeholder=\"password\">",
                "<button id=\"submit-button\">submit</button>",
                "<div id=\"response\">Please Enter Your Username And Password</div>",
                "</html>",
                "",
                "<script>",
                "   function checkInput(userName, password) {",
                "       var response = document.getElementById('response');",
                "       response.innerText = \"Congratulations!!!\";",
                "   }",
                "   //change code below this line",
                "       var el = ",
                "   //change code above this line",
                "</script>"
            ],
            "tests": [
                "assert(code.match(/el\\.addEventListener\\(\\s*'click'\\s*,\\s*checkInput\\s*,\\s*false\\s*\\)|el\\.addEventListener\\(\\s*\"click\"\\s*,\\s*checkInput\\s*,\\s*false\\s*\\)/), 'message: Your code should set an event such that when submit is clicked checkInput is run');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "84ee88402700db21189de996",
            "title": "Stopping event bubbling",
            "description": [
                "<a href=\"/images/eventFlow.png\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/eventFlow.png\" title=\"An image taken From Ducket's JavaScript & JQuery\" alt=\"an image illustrating how events bubble from most specific to least specific\"></a>",
                "When an event is triggered it will be triggered on the most specific item that recieved the event then each of it's parent elements recieve the event up until there are no more parent elements",
                "<a href=\"/images/eventObject.png\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/eventObject.png\" title=\"An image taken From Ducket's JavaScript & JQuery\" alt=\"an image illustrating the event object\"></a>",
                "<hr>",
                "Add code such that if the unordered list or any item inside the list is clicked it will call the function printInnerHTML, however ensure that there is only one call to printInnerHTML."
            ],
            "challengeSeed": [
                "<html>",
								"   <body>",
								"       <h1>My List</h1>",
                "       <ul id=\"list\">",
                "           <li id=\"item1\">1</li>",
                "           <li id=\"item2\">2</li>",
                "           <li id=\"item3\">3</li>",
								"       </ul>",
								"       <input id='output' type='text' placeholder='Click a list item!'>",
                "   </body>",
                "</html>",
                "",
                "<script>",
                "   //change code below this line",
								"   function printInnerHTML(e) {",
								"       let el = document.getElementById('output');",
                "       el.value = el.value + e.target.innerText;",
                "   }",
                "       var list = document.getElementById('list');",
                "       var item1 = document.getElementById('item1');",
                "       var item2 = document.getElementById('item2');",
                "       var item3 = document.getElementById('item3');",
                "   //change code above this line",
                "</script>"
            ],
            "tests": [
                "assert(code.match(/list\\.addEventListener\\('click',\\s*printInnerHTML\\)|list\\.addEventListener\\(\"click\",\\s*printInnerHTML\\)/), 'message: Your code should set an event such that when the list is clicked printInnerHTML is run');",
								"assert(code.match(/e\\.stopPropagation\\(\\)/), 'message: Your code should use stopPropagation.');",
								"assert(function f() { let list = document.getElementsByTagName('ul')[0]; let output = document.getElementById('output'); let click1 = new MouseEvent('click'); list.dispatchEvent(click1); return ( output.value === '123' ); }(), 'message: When the ul list is clicked, the output should equal 123');",
								"assert(function f() { let item = document.getElementsByTagName('li')[0]; let output = document.getElementById('output'); output.value = ''; let click1 = new MouseEvent('click'); item.dispatchEvent(click1); return ( output.value === '1' ); }(), 'message: When the first list item is clicked, the output should equal 1 (not 11!)');",
								"assert(function f() { let item = document.getElementsByTagName('li')[1]; let output = document.getElementById('output'); output.value = ''; let click1 = new MouseEvent('click'); item.dispatchEvent(click1); return ( output.value === '2' ); }(), 'message: When the second list item is clicked, the output should equal 2 (not 22!)');",
								"assert(function f() { let item = document.getElementsByTagName('li')[2]; let output = document.getElementById('output'); output.value = ''; let click1 = new MouseEvent('click'); item.dispatchEvent(click1); return ( output.value === '3' ); }(), 'message: When the third list item is clicked, the output should equal 3 (not 33!)');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "672b4dd07724598614454a47",
            "title": "Practice using key events",
            "description": [
							"The page here displays a horizontal bar and a balloon emoji, 🎈.",
							"Write a 'myKeyDownEventHandler' function, then add a 'keydown' event listener to the window which executes that function when a key is pressed.",
							"When you press the right or left arrow buttons, the bar should increase or decrease 5px in width accordingly.",
							"When you press the up arrow, the balloon should inflate (grow) 10 percent, and when you press the down arrow, it should deflate (shrink) 10 percent.",
							"You can control the size of text (emoji are text) by setting the font-size CSS property (<code>style.fontSize</code>) on its parent element. Remember to include a unit in the value—for example, pixels (10px).",
							"To check the name of the key that is passed to your function, look at the value of <code>event.key</code>.",
							"The key values for the arrow keys are <code>ArrowUp</code>, <code>ArrowDown</code>, <code>ArrowLeft</code>, <code>ArrowRight</code>. Make sure the keys change only the objects in question without scrolling the page.",
							"When that works, add a feature where, if you blow up the balloon past 250 px, it explodes. In this case, exploding means that it is replaced with an 💥 emoji, and the event handler is removed (so that you can’t inflate or deflate the explosion).",
							"For help with this challenge, refer to chapter 15 in Haverbeke's <a target='_blank' href='http://codebasecamp.org/educationMaterials/booksMaterials/languages/javascript-es5/eloquent-javascript-haverbeke.pdf'>Eloquent JavaScript</a>"
            ],
            "challengeSeed": [
							"<style>",
							"  #bar { background: orange; height: 20px } ",
							"</style>",
							"",
							"<p>Use left/right arrow keys to change its width:</p>",
							"<div id='bar'></div>",
							"<p>Use up/down arrow keys to inflate/deflate... try not to pop it!</p>",
							"<div id='balloon'>🎈</div>  <!-- &#127880; -->",
							"",
							"<script>",
							"",
							"  let myBody = document.getElementsByTagName('body')[0];",
							"  let barWidth = 60;",
							"  let balloonFontSize = 20;",
							"",
							"  let bar = myBody.querySelector('#bar');",
							"  bar.style.width = barWidth + 'px';",
							"  let balloon = myBody.querySelector('#balloon');",
							"  balloon.style.fontSize = balloonFontSize + 'px';",
							"",
							"  function myKeyDownEventHandler(event) {",
							"",
							"    // Enter your code below this line",
							"",
							"    // Enter your code above this line",
							"  }",
							"",
							"  // Edit and uncomment the following:",
							"  // myBody.addEventListener( // enter your code here );",
							"",
							"</script>"
            ],
            "tests": [
							"assert(function f() { let originalBubbleSize = balloonFontSize; let kb1 = new KeyboardEvent('keydown', { key: 'ArrowUp' }); myBody.dispatchEvent(kb1); return (balloonFontSize == 1.1 * originalBubbleSize ); }(), 'message: When an ArrowUp KeyboardEvent is dispatched, the balloonFontSize should increase by 10%; do not run tests if the balloon is already popped');",
							"assert(function f() { let originalBubbleSize = balloonFontSize; let kb1 = new KeyboardEvent('keydown', { key: 'ArrowDown' }); myBody.dispatchEvent(kb1); return (balloonFontSize == originalBubbleSize - originalBubbleSize * .1 ); }(), 'message: When an ArrowDown KeyboardEvent is dispatched, the balloonFontSize should decrease by 10%');",
							"assert(function f() { let originalBarWidth = barWidth; let kb1 = new KeyboardEvent('keydown', { key: 'ArrowRight' }); myBody.dispatchEvent(kb1); return (barWidth == originalBarWidth + 5 ); }(), 'message: When an ArrowRight KeyboardEvent is dispatched, the barWidth should increase by 5');",	
							"assert(function f() { let originalBarWidth = barWidth; let kb1 = new KeyboardEvent('keydown', { key: 'ArrowLeft' }); myBody.dispatchEvent(kb1); return (barWidth == originalBarWidth - 5 ); }(), 'message: When an ArrowLeft KeyboardEvent is dispatched, the barWidth should decrease by 5');",
							"assert(function f() { let originalBarWidth = barWidth; let kb1 = new KeyboardEvent('keydown', { key: 'ArrowLeft' }); myBody.dispatchEvent(kb1); return (barWidth == originalBarWidth - 5 ); }(), 'message: When an ArrowLeft KeyboardEvent is dispatched, the barWidth should decrease by 5');",
							"assert(function f() { if (balloon.textContent != '🎈') return false; let kb1 = new KeyboardEvent('keydown', { key: 'ArrowUp' }); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); myBody.dispatchEvent(kb1); return balloon.textContent == '💥'; }(), 'message: The balloon.textContent should initially be 🎈, then when an ArrowUp KeyboardEvent is dispatched 40 times, the balloon.textContent should be 💥');",
							"assert(function f() { if (balloon.textContent != '💥') return false; let originalBubbleSize = balloonFontSize; let kb1 = new KeyboardEvent('keydown', { key: 'ArrowDown' }); myBody.dispatchEvent(kb1); return (balloonFontSize == originalBubbleSize); }(), 'message: When an ArrowDown KeyboardEvent is dispatched after the balloon has already busted, the balloonFontSize should NOT decrease (the event listener should be removed)');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "e40d3e0077e545e9c4678c56",
            "title": "Clickable Tabs",
            "description": [
							"Tabbed panels are widely used in user interfaces. They allow you to select an interface panel by choosing from a number of tabs “sticking out” above an element.",
							"In this exercise you must implement a simple tabbed interface. Write a function, <code>asTabs</code>, that takes a DOM node and creates a tabbed interface showing the <a target='_blank' href='http://codebasecamp.org/docs/javascript/developer.mozilla.org/en-US/docs/Web/API/ParentNode/children.html'>child elements</a> of that node.",
							"Your tabbed interface can be a list or just a div that contains  <code>button</code> elements.  Once this is created, you can <code>prepend</code> it to the top of the outer div (the parentNode of tab-panel).",
							"Each button's innerText should be set to match the corresponding <code>data-tabname</code> attribute of the div.  For example:",
							"<img src='http://codebasecamp.org/educationMaterials/images/astabs_1.PNG'>",
							"Then if you click the second button:",
							"<img src='http://codebasecamp.org/educationMaterials/images/astabs_2.PNG'>",
							"To get the value of data-tabname for an element, you can use the syntax <code><em>myElement</em>.getAttribute('data-tabname')</code>.",
							"All but one of the original children should be hidden (given a display style of none). The currently visible node can be selected by clicking the buttons.",
							"You should implement a <code>click</code> event listener function, and add it to each of your buttons.  When the button is clicked, your event listener can refer to the value of that button by looking at <code>event.target.innerText</code>.  Then use that value to refer to the element in question by id, to set visibility.",
							"Extra credit: when that works, extend it to style the button for the currently selected tab differently so that it is obvious which tab is selected.",
							"For help with this challenge, refer to chapter 15 in Haverbeke's <a target='_blank' href='http://codebasecamp.org/educationMaterials/booksMaterials/languages/javascript-es5/eloquent-javascript-haverbeke.pdf'>Eloquent JavaScript</a>"
            ],
            "challengeSeed": [
							"<div>",
							"<tab-panel>",
							"",
							"  <div data-tabname='one'><img style='width: 100%' src='http://codebasecamp.org/educationMaterials/images/hi-res/14.jpg'></div>",
							"",
							"  <div data-tabname='two'><img style='width: 100%' src='http://codebasecamp.org/educationMaterials/images/hi-res/21.jpg'></div>",
							"",
							"  <div data-tabname='three'><img style='width: 100%' src='http://codebasecamp.org/educationMaterials/images/hi-res/28.jpg'></div>",
							"</tab-panel>",
							"",
							"</div>",
							"",
							"<script>",
							"",
							"  function asTabs(node) {",
							"",
							"    // Enter your code below this line",
							"",
							"    // Enter your code above this line",
							"  }",
							"",
							"  function handleButtonClick(event) {",
							"",
							"    // Enter your code below this line",
							"",
							"    // Enter your code above this line",
							"  }",
							"",
							"  asTabs(document.querySelector('tab-panel'));",
							"",
							"</script>"

            ],
            "tests": [
							"assert(function f() { let button1 = document.getElementsByTagName('button')[0]; let tabs = document.getElementsByTagName('tab-panel')[0].children; let click1 = new MouseEvent('click'); button1.dispatchEvent(click1); return ( tabs[1].style.display == 'none' && tabs[2].style.display == 'none' ); }(), 'message: When the first button is clicked, the second and third elements in the tab-panel should have their display set to none');",
							"assert(function f() { let button2 = document.getElementsByTagName('button')[1]; let tabs = document.getElementsByTagName('tab-panel')[0].children; let click2 = new MouseEvent('click'); button2.dispatchEvent(click2); return ( tabs[0].style.display == 'none' && tabs[2].style.display == 'none' ); }(), 'message: When the second button is clicked, the first and third elements in the tab-panel should have their display set to none');",
							"assert(function f() { let button3 = document.getElementsByTagName('button')[2]; let tabs = document.getElementsByTagName('tab-panel')[0].children; let click3 = new MouseEvent('click'); button3.dispatchEvent(click3); return ( tabs[0].style.display == 'none' && tabs[1].style.display == 'none' ); }(), 'message: When the third button is clicked, the first and second elements in the tab-panel should have their display set to none');"

            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        }
    ]
}