{
	"name": "Web Storage API",
	"order": 3,
	"time": "2 hours",
	"helpRoom": "Help",
	"challenges": [
		{
		  "id": "7ca053b0c58e0537242c43f8",
		  "title": "Introduction to Web Storage API",
		  "description": [
				[
					"",
					"",
					"The <a href='http://codebasecamp.org/docs/javascript/developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API.html'> <strong>Web Storage API</strong> </a> allows for the storage of key value pairs in the browser.",
					""
				],
				[
					"",
					"",
					"The Web Storage API can store values using two different systems, <code>sessionStorage</code> and <code>localStorage</code>.<br><br><ul><li><code>sessionStorage</code> is a storage area for the duration of the page session (as long as the browser is open and is removed when the browser is closed).</li><li><code>localStorage</code> persists even when the browser is closed and reopened.</li></ul>",
					""
				],
				[
					"",
					"",
					"This Web Storage API extends the <code>Window</code> object with two properties â€” <code>Window.sessionStorage</code> and <code>Window.localStorage</code>.<br><br> These two objects implement the <code>Storage</code> interface.<br><br> There is also <code>Window.onstorage</code> event handler that fires when a storage area changes.",
					""
				],
				[
					"",
					"",
					"For these challenges we will use localStorage.",
					""
				]
		  ],
			"releasedOn": "Oct 1, 2018",
		  "challengeSeed": [],
		  "tests": [],
		  "type": "Waypoint",
		  "challengeType": 7,
		  "isRequired": false,
		  "translations": {}
		},
		{
			"id": "a5188bb0c58d118854072f21",
			"title": "Storage.setItem()",
			"description": [
				"The <code>setItem()</code> method of the <a href='http://codebasecamp.org/docs/javascript/developer.mozilla.org/en-US/docs/Web/API/Storage/setItem.html' title='The Storage interface of the Web Storage API provides access to the session storage or local storage for a particular domain, allowing you to for example add, modify or delete stored data items.' target='_blank'> <code>Storage</code> </a> interface, when passed a key name and value, will add that key to the storage, or update that key's value if it already exists.",
				"<blockquote><em>storage</em>.setItem(<em>keyName</em>, <em>keyValue</em>);</blockquote>",
				"For example:",
				"The following creates two data items inside local storage.",
				"<blockquote>localStorage.setItem('bgcolor', 'red');<br>localStorage.setItem('font', 'Helvetica'); </blockquote>",
				"Values can also be set by using array notation and assignment.",
				"<blockquote>localStorage['bgcolor'] = 'red';<br>localStorage['font'] = 'Helvetica'; </blockquote>",
				"<hr>",
				"Add a click mouse event to the save button.<br>In the event handler use local storage to save the background color value with the key <em>background-color</em>.<br>Before running the test, click the save button to save the value to local storage."
			],
      "challengeSeed": [
				"<h1>local web storage</h1>",
				"",
				"<div>",
				"  Choose background color:",
				"  <input id='background-color-text' value='FF0000'>",
				"</div>",
				"",
				"<button id='save-button'>Save</button>"
      ],
			"tests": [
				{
					"text": "When the button is clicked, the stored value of background-color should match the value of the background-color-text input field.",
					"testString": "assert(function f() { if (! document.getElementById('background-color-text').value) return false; localStorage.removeItem('background-color'); let button = document.getElementById('save-button'); let click = new MouseEvent('click'); button.dispatchEvent(click); return ( document.getElementById('background-color-text').value === localStorage.getItem('background-color') ); }(), 'message: When the button is clicked, the stored value of background-color should match the value of the background-color-text input field.');"
				}
			],
			"solutions": [],
			"hints": [],
			"releasedOn": "Oct 1, 2018",
			"challengeType": 0
		},
		{
			"id": "26eb30a0c6492d38478f1682",
			"title": "Storage.getItem()",
			"description": [
				"The <code>getItem()</code> method of the <a href='http://codebasecamp.org/docs/javascript/developer.mozilla.org/en-US/docs/Web/API/Storage/getItem.html' target='_blank'> <code>Storage</code> </a> interface, when passed a key name, will return that key's value.",
				"<blockquote>var <em>aValue</em> = <em>storage</em>.getItem(<em>keyName</em>);</blockquote>",
				"For example:",
				"The following creates two data items inside local storage.",
				"<blockquote>var currentColor = localStorage.getItem('bgcolor');<br>var currentFont = localStorage.getItem('font');</blockquote>",
				"You can also get values by using array notation.",
				"<blockquote>var currentColor = localStorage['bgcolor'];<br>var currentFont = localStorage['font'];</blockquote>",
				"<hr>",
				"Add a click mouse event to the load button and load the background color value into the background color textbox with the key <em>background-color</em>."
			],
      "challengeSeed": [
				"<h1>local web storage</h1>",
				"",
				"<div>",
				"  Saved background color:",
				"  <input id='background-color-text'>",
				"</div>",
				"",
				"<button id='load-button'>Load</button>"
      ],
			"tests": [
				{
					"text": "When the button is clicked, the value of the background-color-text input field should change to the stored value of background-color, which should still exist from the last lesson.  If you have cleared your localStorage since then, go back and re-do the previous lesson.",
					"testString": "assert(function f() { if (!localStorage.getItem('background-color')) return false; let button = document.getElementById('load-button'); document.getElementById('background-color-text').value = ''; let click = new MouseEvent('click'); button.dispatchEvent(click); return ( document.getElementById('background-color-text').value === localStorage.getItem('background-color') ); }(), 'message: When the button is clicked, the value of the background-color-text input field should change to the stored value of background-color, which should still exist from the last lesson.  If you have cleared your localStorage since then, go back and re-do the previous lesson.');"
				}
			],
			"solutions": [],
			"hints": [],
			"releasedOn": "Oct 1, 2018",
			"challengeType": 0
		},
		{
			"id": "b28f7c70c74ca5e4c5e3f231",
			"title": "Other Storage Methods",
			"description": [
				"The full API for Storage can be found <a href='http://codebasecamp.org/docs/javascript/developer.mozilla.org/en-US/docs/Web/API/Storage.html' target='_blank'> here </a>.",
				"These methods include removeItem (for removing a single item by key) and clear (for removing all items).",
				"For example:",
				"The following removes an item from local storage.",
				"<blockquote>localStorage.removeItem('bgcolor');</blockquote>",
				"<hr>",
				"Add a click mouse event to the remove button and remove the background color item with the key <em>background-color</em>."
			],
      "challengeSeed": [
				"<h1>local web storage</h1>",
				"",
				"<button id='remove-button'>Remove</button>"
      ],
			"tests": [
				{
					"text": "When the button is clicked, the background-color item in localStorage should be removed.",
					"testString": "assert(function f() { localStorage.setItem('background-color', 'FF0000'); let button = document.getElementById('remove-button'); let click = new MouseEvent('click'); button.dispatchEvent(click); return ( ! localStorage.getItem('background-color') ); }(), 'message: When the button is clicked, the background-color item in localStorage should be removed.');"
				}
			],
			"solutions": [],
			"hints": [],
			"releasedOn": "Oct 1, 2018",
			"challengeType": 0
		},
		{
			"id": "19f8aec07b7cd7698bf0a74b",
			"title": "Note Mini-App Using localStorage",
			"description": [
				"Put your knowledge about localStorage to the test by completing this Mini-App for taking notes.  See if you can follow and understand all the code.",
				"setState accepts a newState object that looks like this:",
				"   <blockquote>{ notes: {'shopping list': 'Bread\\nMilk'}, selected: 'shopping list' }</blockquote>",
				"Then for each note category (e.g. 'shopping list'), it adds an option to the select dropdown, marking it selected if necessary.",
				"<hr>",
				"Add code where indicated:",
				"  1. Update the <code>note.value</code> accordingly.  The new value will be equal to the currently-selected note contents, i.e. <code>newState.notes[newState.selected]</code>.",
				"  2. Set the <code>Notes</code> item in localStorage to newState.  Since localStorage items are stored in string format, you will need to set it to <code>JSON.stringify(newState)</code>.",
				"  3. Set the state to equal the newState.",
				"Then add three event listeners below, as follows:",
				"  1. A <code>change</code> event listener to the list, which calls setState with the updated state.  In this case the <code>notes</code> in the state will remain the same; only the <code>selected</code> value will change to match <code>list.value</code>", 
				"  2. An <code>input</code> event listener to the note, which calls setState with the updated state.",
				"  3. A <code>click</code> event listener to the notesButton, which uses the 'prompt' method to prompt for a Note Name, then updates the state with an empty note by that name.  Once again, as in step 2, you will need to merge the old state with the new.  Then mark that new note as selected.",
				"",
				"* You could use <a target='_blank' href='http://codebasecamp.org/docs/javascript/developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/assign.html'>Object.assign()</a> to merge the old state with your new state (required in steps 2 and 3 above, but in this challenge use <a target='_blank' href='http://brickhousecodecamp.org/educationMaterials/booksMaterials/languages/javascript-es6/differences-between-es6-and-es5/es5-vs-es6-with-example-code-codeburst.html'>ES6+ methodology instead</a>, which looks a little cleaner.  For example:",
				"<blockquote>let newNote = { [state.selected]: note.value };\nsetState({\n\tnotes: { ...state.notes, ...newNote },\n\tselected: state.selected\n});</blockquote>"
			],
      "challengeSeed": [
				"<h1>My Note Lists</h1>",
				"",
				"Notes: <select id='notesSelect'></select> <button id='notesButton'>Add</button><br>",
				"<textarea style='width: 100%; height: 100px' id='notesTextArea'></textarea>",
				"",
				"<script>",
				"   let list = document.querySelector('#notesSelect');",
				"   let note = document.querySelector('#notesTextArea');",
				"   let state;",
				"",
				"   function setState(newState) {",
				"",
				"       list.textContent = '';",
				"       let noteNames = Object.keys(newState.notes);",
				"",
				"       for (let name of noteNames) {",
				"          let o = document.createElement('option');",
				"          o.textContent = name;",
				"          if (newState.selected === name) {",
				"             o.selected = true;",
				"          }",
				"          list.appendChild(o);",
				"       }",
				"",
				"       // Add your code here",
				"       ",
				"   }",
				"",
				"   let currentNotes = localStorage.getItem('Notes');",
				"",
				"   let defaultNotes = { notes: {'shopping list': 'Bread\\nMilk'}, selected: 'shopping list' };",
				"",
				"   setState(JSON.parse(currentNotes) || defaultNotes);",
				"",
				"   // Add your event listeners here",
				"",
				"</script>"
      ],
			"tests": [
				{
					"text": "Calling setState with a given state (containing a notes object and selected string) should update the value of Notes in the localStorage.",
					"testString": "assert(function f() { localStorage.removeItem('Notes'); setState(defaultNotes); let currentState = localStorage.getItem('Notes'); return (JSON.parse(currentState).selected === 'shopping list' && JSON.parse(currentState).notes['shopping list'] === 'Bread\\nMilk'); }(), 'message: Calling setState with a given state (containing a notes object and selected string) should update the value of Notes in the localStorage.');"
				},
				{
					"text": "Appending text to the note value should update the corresponding note value in the state in localStorage.",
					"testString": "assert(function f() { localStorage.removeItem('Notes'); setState(defaultNotes); note.value = note.value + 'A'; let input = new Event('input'); note.dispatchEvent(input); let currentState = localStorage.getItem('Notes'); return (JSON.parse(currentState).notes['shopping list'] === 'Bread\\nMilkA'); }(), 'message: Appending text to the note value should update the corresponding note value in the state in localStorage.');"
				},
				{
					"text": "Do not use Object.assign to combine two state objects in this challenge.  Use the ES6+ methodology instead, which uses the spread (...) operator.",
					"testString": "assert(! code.match(/Object.assign/), 'message: Do not use Object.assign to combine two state objects in this challenge.  Use the ES6+ methodology instead, which uses the spread (...) operator.');"
				}
			],
			"solutions": [],
			"hints": [],
			"releasedOn": "May 21, 2019",
			"challengeType": 0
		}
	]
}