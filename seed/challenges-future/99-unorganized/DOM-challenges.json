{
    "name": "DOM",
    "order": 4,
    "time": "150 hours",
    "helpRoom": "Help",
    "challenges": [
        {
            "id": "83ac98d02700db21189de995",
            "title": "Introduction to the DOM Challenges",
            "description": [
                [
                    "",
                    "",
                    "The Document Object Model (DOM) specifies how browsers should create a model of an HTML page and how JavaScript can access and update the contents of a web page while it is in the browser window"
                ],
                [
                    "",
                    "",
                    "The DOM is neither part of HTML, nor part of JavaScript; it is a separate set of rules. It is implemented by all major browser makers, and covers two primary areas:",
                    ""
                ],
                [
                    "MAKING A MODEL OF THE HTML PAGE",
                    "",
                    "When the browser loads a web page, it creates a model of the page in memory. The DOM specifies the way in which the browser should structure this model using a DOM tree. The DOM is called an object model because the model (the DOM tree) is made of objects. Each object represents a different part of the page loaded in the browser window."
                ],
                [
                    "ACCESSING AND CHANGING THE HTML PAGE",
                    "",
                    "The DOM also defines methods and properties to access and update each object in this model, which in turn updates what the user sees in the browser. You will hear people call the DOMan Application Programming Interface (API). User interfaces let humans interact with programs; APis let programs (and scripts) talk to each other. The DOM states what your script can ask the browser about the current page, and how to tell the browser to update what is being shown to the user."
                ]
            ],
            "releasedOn": "",
            "challengeSeed": [],
            "tests": [],
            "type": "Waypoint",
            "challengeType": 7,
            "isRequired": false,
            "translations": {}
        },
        {
            "id": "87ee88402700db21189de995",
            "title": "Select an Element By Its id",
            "description": [
                "The DOM is a way of organizing the elements of an HTML document, for example, the following HTML code:",
                "<a href=\"http://cua.cucfcua.edu/codecamp/JAVASCRIPT_and_JQUERY_Jon_Duckett.pdf\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/html-body.png\" title=\"Click to view in the Ducket's JavaScript & JQuery\" alt=\"an image illustrating an example of html code\"></a>",
                "In the DOM may be thought of more like:",
                "<a href=\"http://cua.cucfcua.edu/codecamp/JAVASCRIPT_and_JQUERY_Jon_Duckett.pdf\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/dom-tree.png\" title=\"Click to view in the Ducket's JavaScript & JQuery\" alt=\"an image illustrating the organization of the DOM\"></a>",
                "The DOM allows us to access the elements of a page through their id's, classes, tags, parent/child elements etc.",
                "Methods that find elements in the DOM tree are called DOM queries.",
                "When you need to work with an element more than once, you should use a variable to store the result of this query.",
                "<a href=\"http://cua.cucfcua.edu/codecamp/JAVASCRIPT_and_JQUERY_Jon_Duckett.pdf\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/elementById.png\" title=\"Click to view in the Ducket's JavaScript & JQuery\" alt=\"an image illustrating the organization of the DOM\"></a>",
                "<hr>",
                "Lets start by capturing the second item in the list in this way."
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  .near-expiration{",
                "    color:red;",
                "  }",
                "  .on-sale{",
                "    background-color: cyan;",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul>",
                "        <li id=\"one\"><em>fresh</em> figs</li>",
                "        <li id=\"two\" class=\"near-expiration\">bread</li>",
                "        <li id=\"three\" class=\"on-sale\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "  var el = // change this line",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert(el.id == 'two', 'message: var el should capture the second list item');"
            ],
            "type": "waypoint",
            "isRequired": true,
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "8fb558b02700db21189de995",
            "title": "Set The Class On An Element",
            "description": [
                "Now that we have the element stored as a variable we can add and remove classes from it, change its text etc.",
                "In our css code for our shopping list you may have noticed that we have a class called \"on-sale\", suppose we were to run a query that told us that bread was now on sale. We would then want to add the class \"on-sale\" to that list item so it'd also be highlighted.",
                "To do this we will assign the className on the element we captured."
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  .near-expiration{",
                "    color:red;",
                "  }",
                "  .on-sale{",
                "    background-color: cyan;",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul>",
                "        <li id=\"one\"><em>fresh</em> figs</li>",
                "        <li id=\"two\" class=\"near-expiration\">bread</li>",
                "        <li id=\"three\" class=\"on-sale\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "  var el = document.getElementById(\"two\");",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"li[id='two']\").hasClass(\"on-sale\"), 'message: the second element \"bread\" should have the class <code>on-sale</code>');"
            ],
            "type": "waypoint",
            "isRequired": true,
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "90a362302700db21189de995",
            "title": "Preserving Old Classes When Adding New Ones",
            "description": [
                "Notice that though we now added the class 'on-sale' to bread that we lost the class 'near-expiration', this can be a problem since it's unlikely that the bread got younger by going on sale.",
                "In order to preserve the classes that the element already has, we could capture the classes that it already has, append our class to it, and then set the className element.",
                "This seems like a lot of work, but JavaScript has a method for us in the elements classList attribute called add that takes care of that for us. This way of handling the problem will also only add the class if the element doesn't already possess it."
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  .near-expiration{",
                "    color:red;",
                "  }",
                "  .on-sale{",
                "    background-color: cyan;",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul>",
                "        <li id=\"one\"><em>fresh</em> figs</li>",
                "        <li id=\"two\" class=\"near-expiration\">bread</li>",
                "        <li id=\"three\" class=\"on-sale\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "  var el = document.getElementById(\"two\");",
                "  el.className = 'on-sale';",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"li[id='two']\").hasClass(\"on-sale\") && $(\"li[id='two']\").hasClass(\"near-expiration\"), 'message: the second element \"bread\" should have the class <code>on-sale</code> and the class <code>near-expiration</code>');",
                "assert(!code.match(/on-sale\\s+near-expiration/) && !code.match(/near-expiration\\s+on-sale/), 'message: Your code should add to the classes the element already has.');"
            ],
            "type": "waypoint",
            "isRequired": true,
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "bb86ff702700b21189de995",
            "title": "Adding Classes To Multiple Items",
            "description": [
                "Now that we know how to add classes to elements with or without removing those it already has, lets pretend we waited to long and now our 'near-expiration' items are now expired, so we need to find all items with the class 'near-expired' and change their class to 'expired' (this time we don't need to preserve the old classes).",
                "There are many ways to capture multiple elements from a page, the most common of which are shown here:",
                "<a href=\"http://cua.cucfcua.edu/codecamp/JAVASCRIPT_and_JQUERY_Jon_Duckett.pdf\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/elementSelectors.png\" title=\"Click to view in the Ducket's JavaScript & JQuery\" alt=\"an image illustrating the organization of the DOM\"></a>",
                "",
                "LIVE & STATIC NODELISTS \n There are times when you will want to work with the same selection of elements several times, so the NodeList can be stored in a variable and re-used (rather than collecting the same elements again). In a live Nodelist, when your script updates the page, the Node list is updated at the same time. The methods beginning getEl ementsBy ... return live Nodelists. They are also typically faster to generate than static Nodelists. "
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  .near-expiration{",
                "    color:red;",
                "  }",
                "  .purchased{",
                "    font-weight: bold;",
                "  }",
                "  .on-sale{",
                "    background-color: cyan;",
                "  }",
                "  .expired{",
                "    color:white;",
                "    background-color: red;",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul>",
                "        <li id=\"one\"><em>fresh</em> figs</li>",
                "        <li id=\"two\" class=\"near-expiration on-sale\">bread</li>",
                "        <li id=\"three\" class=\"on-sale\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "        <li id=\"five\" class=\"on-sale\">oranges</li>",
                "        <li id=\"six\" class=\"near-expiration on-sale\">bananas</li>",
                "        <li id=\"seven\">apples</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"li[id='two']\").hasClass(\"expired\") && $(\"li[id='six']\").hasClass(\"expired\"), 'message: the items that have the class <code>near-expiration</code> should have the class <code>expired</code>');",
                "assert(!$(\"li[id='one']\").hasClass(\"expired\") && !$(\"li[id='three']\").hasClass(\"expired\") && !$(\"li[id='four']\").hasClass(\"expired\") && !$(\"li[id='five']\").hasClass(\"expired\") && !$(\"li[id='seven']\").hasClass(\"expired\"), 'message: Your code should NOT effect any items without the class <code>near-expiration</code>');"
            ],
            "type": "waypoint",
            "isRequired": true,
            "challengeType": 0,
            "translations": {}
        }
    ]
}